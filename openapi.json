openapi: 3.0.0
info:
  title: Items and Orders API
  version: 1.0.0
  description: API for managing items and orders in an e-commerce system

servers:
  - url: https://api.example.com/v1

security:
  - BearerAuth: []

paths:
  /items:
    get:
      summary: List all items
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Number of items to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of items to skip
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemList'
    post:
      summary: Create a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /items/{item_id}:
    get:
      summary: Get a specific item
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    put:
      summary: Update an item
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    delete:
      summary: Delete an item
      parameters:
        - in: path
          name: item_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful response

  /orders:
    get:
      summary: List all orders
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Number of orders to return
        - in: query
          name: offset
          schema:
            type: integer
            default: 0
          description: Number of orders to skip
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
    post:
      summary: Create a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{order_id}:
    get:
      summary: Get a specific order
      parameters:
        - in: path
          name: order_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    put:
      summary: Update an order
      parameters:
        - in: path
          name: order_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      summary: Delete an order
      parameters:
        - in: path
          name: order_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successful response

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Item:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
      required:
        - id
        - name
        - price
        - stock

    ItemInput:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        stock:
          type: integer
      required:
        - name
        - price
        - stock

    ItemList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    Order:
      type: object
      properties:
        id:
          type: string
        customer_id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total_amount:
          type: number
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        created_at:
          type: string
          format: date-time
      required:
        - id
        - customer_id
        - items
        - total_amount
        - status
        - created_at

    OrderItem:
      type: object
      properties:
        item_id:
          type: string
        quantity:
          type: integer
      required:
        - item_id
        - quantity

    OrderInput:
      type: object
      properties:
        customer_id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - customer_id
        - items

    OrderUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
      required:
        - status

    OrderList:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        total:
          type: integer
        limit:
          type: integer
        offset:
          type: integer

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
          required:
            - code
            - message
      required:
        - error